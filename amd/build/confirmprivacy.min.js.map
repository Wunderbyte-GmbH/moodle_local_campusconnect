{"version":3,"file":"confirmprivacy.min.js","sources":["../src/confirmprivacy.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AJAX helper for the inline editing a value.\n *\n * This script is automatically included from template core/inplace_editable\n * It registers a click-listener on [data-inplaceeditablelink] link (the \"inplace edit\" icon),\n * then replaces the displayed value with an input field. On \"Enter\" it sends a request\n * to web service core_update_inplace_editable, which invokes the specified callback.\n * Any exception thrown by the web service (or callback) is displayed as an error popup.\n *\n * @module     local_campusconnect/confirmprivacy\n * @copyright  2024 Georg MaiÃŸer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.3\n */\n\n// import Notification from 'core/notification';\n import ModalForm from 'core_form/modalform';\n\n import {\n    get_string as getString\n        }\n        from 'core/str';\n\n/**\n * @param {int} courseid\n */\nexport const init = (courseid) => {\n\n    confirmPrivacyModal(courseid);\n};\n\n/**\n * Confirm privacy modal.\n * @param {int} courseid\n */\nfunction confirmPrivacyModal(courseid) {\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_campusconnect\\\\form\\\\modal_confirmprivacy\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            'courseid': courseid\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {\n            title: getString('confirmprivacyoptiontitle', 'mod_booking'),\n        },\n        // DOM element that should get the focus after the modal dialogue is closed:\n        // returnFocus: element\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n\n        location.reload();\n\n    });\n\n    // Show the form.\n    modalForm.show();\n\n}"],"names":["courseid","modalForm","ModalForm","formClass","args","modalConfig","title","addEventListener","events","FORM_SUBMITTED","location","reload","show","confirmPrivacyModal"],"mappings":";;;;;;;;;;;;;;8JAyCqBA,qBASQA,gBAEnBC,UAAY,IAAIC,mBAAU,CAG5BC,UAAW,kDAEXC,KAAM,UACUJ,UAGhBK,YAAa,CACTC,OAAO,mBAAU,4BAA6B,kBAOtDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KAExDC,SAASC,YAKbV,UAAUW,OAjCVC,CAAoBb"}